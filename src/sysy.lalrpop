// CompUnit      ::= FuncDef;
// 
// Decl          ::= ConstDecl | VarDecl;
// ConstDecl     ::= "const" BType ConstDef {"," ConstDef} ";";
// BType         ::= "int";
// ConstDef      ::= IDENT "=" ConstInitVal;
// ConstInitVal  ::= ConstExp;
// VarDecl       ::= BType VarDef {"," VarDef} ";";
// VarDef        ::= IDENT | IDENT "=" InitVal;
// InitVal       ::= Exp;
// 
// FuncDef       ::= FuncType IDENT "(" ")" Block;
// FuncType      ::= "int";
// 
// Block         ::= "{" {BlockItem} "}";
// BlockItem     ::= Decl | Stmt;
// Stmt          ::= LVal "=" Exp ";"
//                 | "return" Exp ";";
// 
// Exp           ::= LOrExp;
// LVal          ::= IDENT;
// PrimaryExp    ::= "(" Exp ")" | LVal | Number;
// Number        ::= INT_CONST;
// UnaryExp      ::= PrimaryExp | UnaryOp UnaryExp;
// UnaryOp       ::= "+" | "-" | "!";
// MulExp        ::= UnaryExp | MulExp ("*" | "/" | "%") UnaryExp;
// AddExp        ::= MulExp | AddExp ("+" | "-") MulExp;
// RelExp        ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
// EqExp         ::= RelExp | EqExp ("==" | "!=") RelExp;
// LAndExp       ::= EqExp | LAndExp "&&" EqExp;
// LOrExp        ::= LAndExp | LOrExp "||" LAndExp;
// ConstExp      ::= Exp;

use crate::ast_type::*;

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*([^\*]|\*+[^/\*])*\*+/" => {},
    _
}

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

Decl: Decl = {
    <ConstDecl> => Decl::Const(<>),
    <VarDecl> => Decl::Var(<>),
}

ConstDecl: ConstDecl = {
    "const" <b_type: BType> <mut const_defs: (<ConstDef> ",")*> <const_def: ConstDef> ";" => {
        const_defs.push(const_def);
        ConstDecl { b_type, const_defs }
    }
}

BType: BType = "int" => BType::Int;

ConstDef: ConstDef = <ident: IDENT> "=" <const_init_val: ConstInitVal> => ConstDef { <> };

ConstInitVal: ConstInitVal = <const_exp: ConstExp> => ConstInitVal { <> };

VarDecl: VarDecl = {
    <b_type: BType> <mut var_defs: (<VarDef> ",")*> <var_def: VarDef> ";" => {
        var_defs.push(var_def);
        VarDecl { b_type, var_defs }
    }
}

VarDef: VarDef = {
    <ident: IDENT> <init_val: ("=" <InitVal>)?> => VarDef { <> },
}

InitVal: InitVal = <exp: Exp> => InitVal { <> };

FuncDef: FuncDef = {
    <func_type: FuncType> <ident: IDENT> "(" ")" <block: Block> => {
        FuncDef { <> }
    }
}

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <block_items: (<BlockItem>)*> "}" => Block { <> };

BlockItem: BlockItem = {
    <Decl> => BlockItem::Decl(<>),
    <Stmt> => BlockItem::Stmt(<>),
}

Stmt: Stmt = {
    <LVal> "=" <Exp> ";" => Stmt::Assign(<>),
    "return" <Exp> ";" => Stmt::Return(<>),
}

Exp: Exp = <lor_exp: LOrExp> => Exp { <> };

LVal: LVal = <ident: IDENT> => LVal { <> };

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Exp(Box::new(exp)),
    <LVal> => PrimaryExp::LVal(<>),
    <Number> => PrimaryExp::Num(<>),
}

Number: Number = <INT_CONST> => Number::IntConst(<>);

UnaryExp: UnaryExp = {
    <PrimaryExp> => UnaryExp::Primary(<>),
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::Unary(unary_op, Box::new(unary_exp)),
}

UnaryOp: UnaryOp = {
    "+" => UnaryOp::Pos,
    "-" => UnaryOp::Neg,
    "!" => UnaryOp::Not,
}

MulExp: MulExp = {
    <UnaryExp> => MulExp::Unary(<>),
    <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => MulExp::Mul(Box::new(mul_exp), mul_op, unary_exp),
}

MulOp: MulOp = {
    "*" => MulOp::Mul,
    "/" => MulOp::Div,
    "%" => MulOp::Mod,
}

AddExp: AddExp = {
    <MulExp> => AddExp::Mul(<>),
    <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => AddExp::Add(Box::new(add_exp), add_op, mul_exp),
}

AddOp: AddOp = {
    "+" => AddOp::Add,
    "-" => AddOp::Sub,
}

RelExp: RelExp = {
    <AddExp> => RelExp::Add(<>),
    <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => RelExp::Rel(Box::new(rel_exp), rel_op, add_exp),
}

RelOp: RelOp = {
    "<" => RelOp::Lt,
    ">" => RelOp::Gt,
    "<=" => RelOp::Le,
    ">=" => RelOp::Ge,
}

EqExp: EqExp = {
    <RelExp> => EqExp::Rel(<>),
    <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => EqExp::Eq(Box::new(eq_exp), eq_op, rel_exp),
}

EqOp: EqOp = {
    "==" => EqOp::Eq,
    "!=" => EqOp::NotEq,
}

LAndExp: LAndExp = {
    <EqExp> => LAndExp::Eq(<>),
    <land_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::LAnd(Box::new(land_exp), eq_exp),
}

LOrExp: LOrExp = {
    <LAndExp> => LOrExp::LAnd(<>),
    <lor_exp: LOrExp> "||" <land_exp: LAndExp> => LOrExp::LOr(Box::new(lor_exp), land_exp),
}

ConstExp: ConstExp = <exp: Exp> => ConstExp { <> };

IDENT: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

INT_CONST: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
